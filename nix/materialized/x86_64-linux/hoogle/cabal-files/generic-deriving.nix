{ system
  , compiler
  , flags
  , pkgs
  , hsPkgs
  , pkgconfPkgs
  , errorHandler
  , config
  , ... }:
  ({
    flags = { base-4-9 = true; };
    package = {
      specVersion = "1.10";
      identifier = { name = "generic-deriving"; version = "1.14.2"; };
      license = "BSD-3-Clause";
      copyright = "2011-2013 Universiteit Utrecht, University of Oxford";
      maintainer = "generics@haskell.org";
      author = "José Pedro Magalhães";
      homepage = "https://github.com/dreixel/generic-deriving";
      url = "";
      synopsis = "Generic programming library for generalised deriving.";
      description = "This package provides functionality for generalising the deriving mechanism\nin Haskell to arbitrary classes. It was first described in the paper:\n\n*  /A generic deriving mechanism for Haskell/.\nJose Pedro Magalhaes, Atze Dijkstra, Johan Jeuring, and Andres Loeh.\nHaskell'10.\n\nThe current implementation integrates with the new GHC Generics. See\n<http://www.haskell.org/haskellwiki/GHC.Generics> for more information.\nTemplate Haskell code is provided for supporting older GHCs.\n\nThis library is organized as follows:\n\n* \"Generics.Deriving.Base\" defines the core functionality for GHC generics,\nincluding the @Generic(1)@ classes and representation data types.\nOn modern versions of GHC, this simply re-exports \"GHC.Generics\" from\n@base@. On older versions of GHC, this module backports parts of\n\"GHC.Generics\" that were not included at the time, including @Generic(1)@\ninstances.\n\n* \"Generics.Deriving.TH\" implements Template Haskell functionality for\nderiving instances of @Generic(1)@.\n\n* Educational code: in order to provide examples of how to define and use\n\"GHC.Generics\"-based defaults, this library offers a number of modules\nwhich define examples of type classes along with default implementations\nfor the classes' methods. Currently, the following modules are provided:\n\"Generics.Deriving.Copoint\", \"Generics.Deriving.ConNames\",\n\"Generics.Deriving.Enum\", \"Generics.Deriving.Eq\",\n\"Generics.Deriving.Foldable\", \"Generics.Deriving.Functor\",\n\"Generics.Deriving.Monoid\", \"Generics.Deriving.Semigroup\",\n\"Generics.Deriving.Show\", \"Generics.Deriving.Traversable\",\nand \"Generics.Deriving.Uniplate\".\n\nIt is worth emphasizing that these modules are primarly intended for\neducational purposes. Many of the classes in these modules resemble other\ncommonly used classes—for example, @GShow@ from \"Generics.Deriving.Show\"\nresembles @Show@ from @base@—but in general, the classes that\n@generic-deriving@ defines are not drop-in replacements. Moreover, the\ngeneric defaults that @generic-deriving@ provide often make simplifying\nassumptions that may violate expectations of how these classes might work\nelsewhere. For example, the generic default for @GShow@ does not behave\nexactly like @deriving Show@ would.\n\nIf you are seeking \"GHC.Generics\"-based defaults for type classes in\n@base@, consider using the\n@<http://hackage.haskell.org/package/generic-data generic-data>@ library.\n\n* \"Generics.Deriving.Default\" provides newtypes that allow leveraging the\ngeneric defaults in this library using the @DerivingVia@ GHC language\nextension.\n\n* \"Generics.Deriving\" re-exports \"Generics.Deriving.Base\",\n\"Generics.Deriving.Default\", and a selection of educational modules.";
      buildType = "Simple";
      };
    components = {
      "library" = {
        depends = [
          (hsPkgs."containers" or (errorHandler.buildDepError "containers"))
          (hsPkgs."ghc-prim" or (errorHandler.buildDepError "ghc-prim"))
          (hsPkgs."template-haskell" or (errorHandler.buildDepError "template-haskell"))
          (hsPkgs."th-abstraction" or (errorHandler.buildDepError "th-abstraction"))
          ] ++ [ (hsPkgs."base" or (errorHandler.buildDepError "base")) ];
        buildable = true;
        };
      tests = {
        "spec" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."generic-deriving" or (errorHandler.buildDepError "generic-deriving"))
            (hsPkgs."hspec" or (errorHandler.buildDepError "hspec"))
            (hsPkgs."template-haskell" or (errorHandler.buildDepError "template-haskell"))
            ];
          build-tools = [
            (hsPkgs.buildPackages.hspec-discover.components.exes.hspec-discover or (pkgs.buildPackages.hspec-discover or (errorHandler.buildToolDepError "hspec-discover:hspec-discover")))
            ];
          buildable = true;
          };
        };
      };
    } // {
    src = (pkgs.lib).mkDefault (pkgs.fetchurl {
      url = "http://hackage.haskell.org/package/generic-deriving-1.14.2.tar.gz";
      sha256 = "265e351117d451afaa37821ce91b44a02611cc94c7ed917a19e1efb0cc63aa2f";
      });
    }) // {
    package-description-override = "name:                   generic-deriving\nversion:                1.14.2\nsynopsis:               Generic programming library for generalised deriving.\ndescription:\n\n  This package provides functionality for generalising the deriving mechanism\n  in Haskell to arbitrary classes. It was first described in the paper:\n  .\n  *  /A generic deriving mechanism for Haskell/.\n     Jose Pedro Magalhaes, Atze Dijkstra, Johan Jeuring, and Andres Loeh.\n     Haskell'10.\n  .\n  The current implementation integrates with the new GHC Generics. See\n  <http://www.haskell.org/haskellwiki/GHC.Generics> for more information.\n  Template Haskell code is provided for supporting older GHCs.\n  .\n  This library is organized as follows:\n  .\n  * \"Generics.Deriving.Base\" defines the core functionality for GHC generics,\n    including the @Generic(1)@ classes and representation data types.\n    On modern versions of GHC, this simply re-exports \"GHC.Generics\" from\n    @base@. On older versions of GHC, this module backports parts of\n    \"GHC.Generics\" that were not included at the time, including @Generic(1)@\n    instances.\n  .\n  * \"Generics.Deriving.TH\" implements Template Haskell functionality for\n    deriving instances of @Generic(1)@.\n  .\n  * Educational code: in order to provide examples of how to define and use\n    \"GHC.Generics\"-based defaults, this library offers a number of modules\n    which define examples of type classes along with default implementations\n    for the classes' methods. Currently, the following modules are provided:\n    \"Generics.Deriving.Copoint\", \"Generics.Deriving.ConNames\",\n    \"Generics.Deriving.Enum\", \"Generics.Deriving.Eq\",\n    \"Generics.Deriving.Foldable\", \"Generics.Deriving.Functor\",\n    \"Generics.Deriving.Monoid\", \"Generics.Deriving.Semigroup\",\n    \"Generics.Deriving.Show\", \"Generics.Deriving.Traversable\",\n    and \"Generics.Deriving.Uniplate\".\n    .\n    It is worth emphasizing that these modules are primarly intended for\n    educational purposes. Many of the classes in these modules resemble other\n    commonly used classes—for example, @GShow@ from \"Generics.Deriving.Show\"\n    resembles @Show@ from @base@—but in general, the classes that\n    @generic-deriving@ defines are not drop-in replacements. Moreover, the\n    generic defaults that @generic-deriving@ provide often make simplifying\n    assumptions that may violate expectations of how these classes might work\n    elsewhere. For example, the generic default for @GShow@ does not behave\n    exactly like @deriving Show@ would.\n    .\n    If you are seeking \"GHC.Generics\"-based defaults for type classes in\n    @base@, consider using the\n    @<http://hackage.haskell.org/package/generic-data generic-data>@ library.\n  .\n  * \"Generics.Deriving.Default\" provides newtypes that allow leveraging the\n    generic defaults in this library using the @DerivingVia@ GHC language\n    extension.\n  .\n  * \"Generics.Deriving\" re-exports \"Generics.Deriving.Base\",\n    \"Generics.Deriving.Default\", and a selection of educational modules.\n\nhomepage:               https://github.com/dreixel/generic-deriving\nbug-reports:            https://github.com/dreixel/generic-deriving/issues\ncategory:               Generics\ncopyright:              2011-2013 Universiteit Utrecht, University of Oxford\nlicense:                BSD3\nlicense-file:           LICENSE\nauthor:                 José Pedro Magalhães\nmaintainer:             generics@haskell.org\nstability:              experimental\nbuild-type:             Simple\ncabal-version:          >= 1.10\ntested-with:            GHC == 7.0.4\n                      , GHC == 7.2.2\n                      , GHC == 7.4.2\n                      , GHC == 7.6.3\n                      , GHC == 7.8.4\n                      , GHC == 7.10.3\n                      , GHC == 8.0.2\n                      , GHC == 8.2.2\n                      , GHC == 8.4.4\n                      , GHC == 8.6.5\n                      , GHC == 8.8.4\n                      , GHC == 8.10.7\n                      , GHC == 9.0.2\n                      , GHC == 9.2.2\nextra-source-files:     CHANGELOG.md\n                      , README.md\n\nsource-repository head\n  type: git\n  location: https://github.com/dreixel/generic-deriving\n\nflag base-4-9\n  description:          Use base-4.9 or later. This version of base uses a\n                        DataKinds-based encoding of GHC generics metadata.\n  default:              True\n\nlibrary\n  hs-source-dirs:       src\n  exposed-modules:      Generics.Deriving\n                        Generics.Deriving.Base\n                        Generics.Deriving.Instances\n                        Generics.Deriving.Copoint\n                        Generics.Deriving.ConNames\n                        Generics.Deriving.Default\n                        Generics.Deriving.Enum\n                        Generics.Deriving.Eq\n                        Generics.Deriving.Foldable\n                        Generics.Deriving.Functor\n                        Generics.Deriving.Monoid\n                        Generics.Deriving.Semigroup\n                        Generics.Deriving.Show\n                        Generics.Deriving.Traversable\n                        Generics.Deriving.Uniplate\n\n                        Generics.Deriving.TH\n\n  other-modules:        Generics.Deriving.Base.Internal\n                        Generics.Deriving.Monoid.Internal\n                        Generics.Deriving.Semigroup.Internal\n                        Generics.Deriving.TH.Internal\n                        Paths_generic_deriving\n  if flag(base-4-9)\n    build-depends:      base >= 4.9 && < 5\n    other-modules:      Generics.Deriving.TH.Post4_9\n  else\n    build-depends:      base >= 4.3 && < 4.9\n    other-modules:      Generics.Deriving.TH.Pre4_9\n\n  build-depends:        containers       >= 0.1   && < 0.7\n                      , ghc-prim                     < 1\n                      , template-haskell >= 2.4   && < 2.20\n                      , th-abstraction   >= 0.4   && < 0.5\n\n  default-language:     Haskell2010\n  ghc-options:          -Wall\n\ntest-suite spec\n  type:                 exitcode-stdio-1.0\n  main-is:              Spec.hs\n  other-modules:        DefaultSpec\n                        EmptyCaseSpec\n                        ExampleSpec\n                        T68Spec\n                        T80Spec\n                        T82Spec\n                        TypeInTypeSpec\n  build-depends:        base             >= 4.3  && < 5\n                      , generic-deriving\n                      , hspec            >= 2    && < 3\n                      , template-haskell >= 2.4  && < 2.20\n  build-tool-depends:   hspec-discover:hspec-discover\n  hs-source-dirs:       tests\n  default-language:     Haskell2010\n  ghc-options:          -Wall -threaded -rtsopts\n  if impl(ghc >= 8.6)\n    ghc-options:        -Wno-star-is-type\n";
    }